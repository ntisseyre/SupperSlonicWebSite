@using SupperSlonicWebSite.Models;

@model IList<TabWidgetModel>

@section CSS
{
    <link href="@Url.Content("~/Content/css/owinAuth.css")" rel="stylesheet" type="text/css" />
}

@section Scripts
{
    <script type="text/javascript" src="@Url.Content("~/Content/js/owinAuth.js")"></script>

    <script type="text/javascript">
        $(document).ready(function () {
            initOwinAuth();
        });
    </script>

}

<h1 class="first" id="description">OWIN authentication via Social networks</h1>
@Html.Partial("DownloadExampleWidget")
<p>Here you can find an example of code that demonstrates the <strong>Token Based Authentication</strong> using external providers such as:</p>
<ul class="check-list">
    <li>Facebook;</li>
    <li>Google;</li>
    <li>Microsoft.</li>
</ul>

<h1 class="first" id="demo">Demo</h1>
<div class="owinAuth">
    <div id="extProviders"></div>
    <div id="info"></div>
</div>

<h1 id="owin">Owin Middleware</h1>
<p>The <a class="textLink" href="http://owin.org">Owin</a> Middleware modules are responsible for handling the authentication with external authentication providers (such as Google) and establishing an application session through a cookie. On all subsequent calls the application cookie middleware extracts the contents of the incoming application cookie and sets the claims identity of the current context.</p>

<h1>What is a token?</h1>
<p>A token is a string value that represents an encrypted list of <strong>System.Security.Claims</strong>. You can use any claims you like.
My application has its own defined list of claims used across the project. Let's call them <strong>Application Claims</strong>.</p>
<p><strong>Application Claims</strong> is a well-defined list of claims <strong>encrypted by OWIN into the issued token</strong>.
Each time a service receives a token, it tries to decrypt it with its <strong>IIS machine key</strong> back into the list of claims and populate a <strong>User.Identity</strong> object.</p>
<p>To determine either it is an <strong>External Bearer token</strong> or a <strong>local</strong> one it checks the <strong>Issuer</strong> field of the claims. For a local one it must be always <strong>ClaimsIdentity.DefaultIssuer</strong>.<br />
Note, that for the encryption OWIN uses the IIS machine key, that's why you must apply some custom solution for using the same token across several WEB-services.</p>
<p>Here is how I build my Application Claims list:</p>
<div class="code" style="width:531px;float:left;margin-top:-5px"><img src="~/Content/img/owinAuth/Claims.png" alt="claims list"/></div>
<p>So, I can always get all this information from any token issued by my WEB-service.</p>
<p><strong>ClaimsMapper</strong> is an abstract strategy that knows how to map different data models to my claims list.</p>

<h1 style="margin-top:510px">Authentication flows</h1>
<p>An application has three different authentication flows:</p>
<ol>
    <li>A <strong>new user</strong> is authorized through an <strong>external provider</strong>:
        <div class="code" style="width:593px;"><img src="~/Content/img/owinAuth/NotRegisteredExternalFlow.jpg" alt="Not Registered External" /></div>
         After an <strong>External Bearer token</strong> is issued, the user can register in the application using this token and then re-authorize again, to get a new token (Local Bearer).
    </li>
    <li style="margin-top:10px">An <strong>existing user</strong> is authorized through an <strong>external provider</strong>:
        <div class="code" style="width:593px;"><img src="~/Content/img/owinAuth/RegisteredExternalFlow.jpg" alt="Not Registered External" /></div>
    </li>
    <li>An <strong>existing user</strong> is authorized through a <strong>login/password</strong>:
        <div class="code" style="width:489px;"><img src="~/Content/img/owinAuth/RegisteredLocal.jpg" alt="Not Registered External" /></div>
    </li>
</ol>

<h1 id="facebook">Facebook Configuration</h1>
<ol>
    <li>Navigate to the <a class="textLink" href="https://developers.facebook.com/apps">Facebook Developers Page</a> and log in by entering your Facebook credentials;</li>
    <li>If you aren’t already registered as a Facebook developer, click Register as a Developer and follow the directions to register;</li>
    <li>Under the <strong>My Apps</strong> tab, click <strong>+ Add a New App</strong> button:
        <div class="code" style="width:752px;"><img src="~/Content/img/owinAuth/Facebook_new_app.png" alt="Facebook new app" /></div>
    </li>
    <li>Select a <strong>Website</strong> as an app platform:
        <div class="code" style="width:756px;"><img src="~/Content/img/owinAuth/Facebook_app_type.png" alt="Facebook app type" /></div>
    </li>
    <li>Enter an <strong>App Name</strong> and <strong>Category</strong>, then click <strong>Create App</strong>.<br/>
This must be unique across Facebook. The <strong>App Namespace</strong> is the part of the URL that your App will use to access the Facebook application for authentication (for example, https://apps.facebook.com/{App Namespace}). If you don't specify an <strong>App Namespace</strong>, the <strong>App ID</strong> will be used for the URL. The <strong>App ID</strong> is a long system-generated number that you will see in the next step.
</li>
    <li>On the <strong>Basic settings</strong> section of the page:
        <ul>
            <li>Enter <strong>Contact Email</strong>;</li>
            <li>Enter <strong>Site URL</strong> that will send requests to Facebook.</li>
        </ul>
        <div class="code" style="width:729px;"><img src="~/Content/img/owinAuth/Facebook_settings.png" alt="Facebook settings" /></div>
        Note that only you will be able to authenticate using the email alias you have registered. Other users and test accounts will not be able to register.<br />
    You can grant test users access to the application under the <strong>Roles</strong> menu.<br />
    For all other Facebook accounts your application <strong>must be approved</strong> by Facebook. For futher instructions please view <strong>Status & Review</strong> menu.
    </li>
    <li>To disable <strong>sandbox mode</strong> for you app go to the <strong>Status & Review</strong> menu on the left and select <strong>Yes</strong>:
        <div class="code" style="width:760px;"><img src="~/Content/img/owinAuth/Facebook_sandBox.png" alt="Facebook settings" /></div>
    </li>
</ol>

<h1 id="google">Google Configuration</h1>
<ol>
    <li>Navigate to the <a class="textLink" href="https://console.developers.google.com/project">Google Developers Console</a>;</li>
    <li>Click the <strong>Create Project</strong> button and enter a project name and ID (you can use the default values). In a few seconds the new project will be created and your browser will display the new projects page;</li>
    <li>In the left tab, click <strong>APIs & Auth</strong>, and then click <strong>Consent screen</strong>:
        <ul>
            <li>Enter <strong>email address</strong>;</li>
            <li>Enter <strong>product name</strong>:</li>
        </ul>
        <div class="code" style="width:700px;margin-top:-10px"><img src="~/Content/img/owinAuth/Google_consent_screen.png" alt="Google Consent screen" /></div>
    </li>
    <li>In the left tab, click <strong>APIs & Auth</strong>, and then click <strong>APIs</strong>:
        <ul>
            <li>Enable <strong>Google+ API</strong> to support user’s avatar access:</li>
        </ul>
        <div class="code" style="width:574px;margin-top:-10px"><img src="~/Content/img/owinAuth/Google_api_enabled.png" alt="Google+ API enabled" /></div>
    </li>
    <li>In the left tab, click <strong>APIs & Auth</strong> and then click <strong>Credentials</strong>.</li>
    <li>Click the <strong>Create New Client ID</strong> under OAuth:
        <ul>
            <li>In the <strong>Create Client ID</strong> dialog, keep the default <strong>Web application</strong> for the application type;</li>
            <li>Set the Authorized JavaScript origins to the SSL URL of the service, for example: <strong>https://supperslonic.com/</strong>;</li>
            <li>Set the Authorized redirect URI to: <strong>https://supperslonic.com/<u>signin-google</u></strong>.</li>
        </ul>
        <div class="code" style="width:475px;margin-top:-10px"><img src="~/Content/img/owinAuth/Google_client_id.png" alt="Google Client Id" /></div>
    </li>
    <li>Copy and paste the <strong>AppId</strong> and <strong>App Secret</strong> into the <strong>Credentials.resx</strong> file for Google.</li>
</ol>

<h1 id="microsoft">Microsoft Configuration</h1>
<ol>
    <li>Navigate to the <a class="textLink" href="http://go.microsoft.com/fwlink/?LinkID=144070">Microsoft Developer Account</a>;</li>
    <li>Press <strong>Create application</strong> reference;</li>
    <li>In <strong>Basic information</strong> enter valid <strong>Application name</strong> service <strong>URLs</strong>:
        <div class="code" style="width:659px"><img src="~/Content/img/owinAuth/Microsoft_basic_information.png" alt="Microsoft Basic Info" /></div>
    </li>
    <li>In <strong>API Settings</strong> select that it is a <strong>mobile application</strong> and enter a valid <strong>redirect URL</strong>:
        <ul>
            <li>Note to add the <strong><u>signin-microsoft</u></strong> to your <strong>Redirect URLs</strong>.</li>
        </ul>
        <div class="code" style="width:527px;margin-top:-10px"><img src="~/Content/img/owinAuth/Microsoft_api_settings.png" alt="Microsoft API Settings" /></div>
    </li>
    <li>In <strong>App Settings</strong> copy and paste the <strong>AppId</strong> and <strong>App Secret</strong> into the <strong>Credentials.resx</strong> file for Microsoft.</li>
</ol>

@Html.DisplayForModel("TabWidgetsList")
