@using SupperSlonicWebSite.Models;

@model IList<TabWidgetModel>

<h1 class="first" id="description">Agile Release Cycle Control</h1>
<p>This control allows you to display and edit an <strong>agile release cycle</strong>. As usual it has minimum of server-side logic and everything is implemented using <strong>JavaScript</strong> and <strong>CSS</strong>, so it can be useful for all web developers.</p>
<p>Agile release cycle can be displayed in three different ways: <strong>monthly calendar</strong>, <strong>read-only list</strong> and <strong>editable list</strong>. All of them can contain the following items:</p>
@Html.Partial("DownloadExampleWidget")
<ol>
	<li><strong>Planning</strong> – only one per release cycle;</li>
	<li><strong>Sprints</strong> – any number of sprints, but should be at least one;</li>
	<li><strong>Holidays</strong> – any number of holidays;</li>
    <li><strong>Team members’ vacations</strong> – any number of vacations.</li>
</ol>

<p>Calendar:</p>
<div class="demo" style="width:572px;float:left"><img src="~/Content/img/agileCalendar/calendarDemo.jpg" alt="agileCalendarDemo"/></div>
<p style="margin-top:40px" ><strong>Each date contains a short description</strong> which is displayed on mouse over event.</p>
<p style="margin-top:40px"><strong>The first day of the week is a configured property</strong>. You can easily switch to Monday or Sunday, or even Friday. =)</p>
<p style="margin-top:40px"><strong>Dates in a calendar are selectable</strong>. You can bind any event handler to the "Select date(s)" event.</p>
<p style="margin-top:40px"><strong>You can customize colors</strong> for each agile item: planning, sprints, holidays – everything can have its own color.</p>
<p style="margin-top:40px"><strong>You can customize icons</strong> of your team members. If a team member has a vacation, his icon will be displayed in a calendar for the vacation period.</p>

<p style="margin-top:60px">Read-only and edit modes:</p>
<p>An addition to the calendar there are also two templates to display agile release cycle in <strong>read-only mode</strong> and <strong>edit mode</strong>.</p>
<div class="demo" style="width:371px;float:right"><img src="~/Content/img/agileCalendar/editingDemo.jpg" alt="editingDemo"/></div>
<p>Read-only mode is very simple: just displays the list of planning, sprints, holidays and vacations.</p>

<p>Editing mode also displays all items in lists, but it allows you to:</p>
<ul class="check-list">
    <li>Add new items;</li>
    <li>Delete items by dragging them to the trash;</li>
    <li>Select colors with a pretty <a class="textLink" href="@Url.Action("ColorPicker")"><strong>color-Picker</strong></a>;</li>
    <li>Select team members with a cool team-Member-Picker.</li>
</ul>
<div class="demo" style="width:272px;margin-left:40px;margin-top:40px"><img src="~/Content/img/agileCalendar/teamMemberPickerDemo.jpg" alt="teamMemberPickerDemo"/></div>

<h1 id="model" style="margin-top:80px">Model</h1>
<p>Project contains two models for the agile release cylce: <strong>domain model</strong> and <strong>view model</strong>. Domain model is used to retrieve data from the server and save it back. View model is populated based on the domain model and is used in rendering Html in views.</p>
<p>Domain model:</p>
<p><strong>ReleaseCycleModel</strong> class describes a <strong>domain model</strong> for an agile release cycle. This class supports Xml serialization and deserialization.<br />
An XML structure of the model is very simple, also project contains an <strong>XSD schema</strong> to validate an XML.</p>
<div class="code" style="width:730px"><img src="~/Content/img/agileCalendar/xml.jpg" /></div>

<p>View model:</p>
<p>View model is used only to display agile release cycle in a <strong>monthly calendar</strong>.</p>
<p>The calendar rendering logic is decoupled from the agile data model and operates only with abstract classes.<br />
There is a <strong>CalendarBuilder class</strong> which uses an <strong>abstract factory CalendarDateFactoryBase</strong> to render Html.
Factory returns an <strong>abstract class CalendarDateBase</strong> which represents a calendar's date.</p>
<div class="demo" style="width:568px;float:left"><img src="~/Content/img/agileCalendar/calendarBuilder.jpg" alt="calendarBuilder"/></div>
<p style="margin-top:50px">This allows you to reuse the calendar's rendering logic for any other purposes:<br /><strong>display any custom dates</strong>,<br />extend and cover it with tests easily.</p>
<div class="code" style="width:764px;margin-top:200px"><img src="~/Content/img/agileCalendar/calendarBuilderCode.jpg" alt="calendarBuilderCode"/></div>
<p>There are three <strong>Iterators</strong> used inside the calendar’s build logic.</p>
<ol>
    <li>AlignStartOfTheMonthIterator;</li>
    <li>AlignEndOfTheMonthIterator;</li>
    <li>MonthPeriodIterator.</li>
</ol>
<p>First two iterators align the beginning and the end of the month with the days of the week, by generating “empty cells”.<br />
The third iterator provides calendar’s dates from the factory and is used internally to indicate the beginning of the new month.</p>
<p>For an agile calendar an <strong>AgileDateFactory class</strong> exists which creates view model based on domain model.</p>
<div class="code" style="width:750px"><img src="~/Content/img/agileCalendar/calendarFactory.jpg" /></div>

<h1 id="view">View</h1>
<p>There 3 main views to display data:</p>
<ul class="check-list">
	<li>Monthly calendar view;</li>
	<li>Read-only view;</li>
	<li>Edit view.</li>
</ul>
<p><strong>Monthly calendar view</strong> operates over its own data model, abstracted from the agile release cycle. As already mentioned, this allows you to reuse this template for any other entities easily.</p>
<p><strong>Read-only view</strong> displays agile release cycle in a simple and easy-to-read way.</p>
<div class="demo" style="width:271px;float:left;margin-top:1px"><img src="~/Content/img/agileCalendar/readOnlyDemo.jpg" alt="readOnlyDemo"/></div>
<p style="margin-top:35px"><strong>Edit view</strong> displays data the same way as a read-only view, but allows data editing:</p>
<p>There is a <strong>dynamically added template row to enter new data</strong>: new sprints, holidays or vacations;</p>
<p>View has <strong>a <a class="textLink" href="@Url.Action("ColorPicker")"><strong>color-Picker</strong></a> to set custom colors</strong> of the items;</p>
<p><strong>A team-member-Picker</strong> to edit vacations;</p>
<p>There is a <strong>JavaScript function to validate control and to get JSON</strong> representation of the agile release cycle.</p>

<p style="margin-top:55px">There are also some templates that are used internally in the main views.
For the client-side support there are four .js files and four .css files:</p>
<div style="display:table-row">
    <div style="display:table-cell">
        <ul>
            <li><strong>agileReleaseCycle.js</strong></li>
            <li><strong>calendar.js</strong></li>
            <li><strong>colorPicker.js</strong></li>
            <li><strong>teamMemberPicker.js</strong></li>
        </ul>
    </div>
    <div style="display:table-cell">
        <ul>
            <li><strong>agileReleaseCycle.css</strong></li>
            <li><strong>calendar.css</strong></li>
            <li><strong>colorPicker.css</strong></li>
            <li><strong>teamMemberPicker.css</strong></li>
        </ul>
    </div>
</div>
<h1 id="controller">Controller</h1>
<p>Control doesn't have server-side logic. Only small examples of how to serialize/deserialize data and build a monthly calendar.</p>

<h1 id="howToUse">How to use</h1>
<p>Read-only mode and monthly calendar:</p>
<div class="code" style="width:642px"><img src="~/Content/img/agileCalendar/displayTemplate.jpg" /></div>

<p>Edit mode:</p>
<div class="code" style="width:705px"><img src="~/Content/img/agileCalendar/editTemplate.jpg" /></div>

@foreach (TabWidgetModel tabWidget in this.Model)
    { @Html.Partial("TabWidget", tabWidget) }