@using SupperSlonicWebSite.Models;

@model IList<TabWidgetModel>

<h1 class="first" id="description">Weekly Schedule Control</h1>
<p>I wrote a control using <strong>ASP.Net MVC</strong> to display and edit a <strong>weekly schedule</strong>. Most of the logic is in <strong>JavaScript</strong> and <strong>CSS</strong>, so I think that it can be interesting not only to .Net developers =).</p>
@Html.Partial("DownloadExampleWidget")
<p>This control allows you to set working times for each day of the week.<br />
Working time can have on of 3 possible values:</p>
<ol>
	<li><strong>Day-off</strong> – not a working day;</li>
	<li><strong>Round the clock</strong> – 24 hours working day;</li>
	<li><strong>Working hours</strong> – the time when work stars and finishes.</li>
</ol>
<div class="demo" style="width:552px"><img src="~/Content/img/weeklyScheduleDemo.jpg" alt="weeklyScheduleDemo"/></div>
<p>Working times “round the clock” and “working hours” can have <strong>breaks</strong>. For example, a break for lunch during working hours is from 12:00 till 13:00. You can easily register it with this control. The number of breaks is unlimited.</p>
<div class="demo" style="width:208px;float:right"><img src="~/Content/img/weeklyScheduleBreaksDemo.jpg" alt="weeklyScheduleBreaksDemo"/></div>
<p>You can change this logic without any problems: code is very easy to read and I have added lots of comments.</p>
<p>The main features of this control are the following:</p>
<ul class="check-list">
	<li>Model is serialized/deserialized to/from XML on the server side;</li>
	<li>There is an XSD schema to validate an XML;</li>
	<li>A JavaScript function to disable control (read-only mode);</li>
	<li>A JavaScript function to validate control;</li>
	<li>A JavaScript function to get JSON format of a control’s data;</li>
	<li>Control inherits jQuery UI styles, so you can easily switch between jQuery UI Themes;</li>
    <li>There is a separate dialog to edit breaks. If a user doesn’t want to confirm her changes, she can press “Cancel” and the changes will not take an affect;</li>
	<li>When a user sets a working time for Monday, it is automatically applied to days from Tuesday to Friday. This is useful, because in real life all these days usually have the same working hours and it saves user’s time to enter data.</li>
</ul>
<h1 id="model">Model</h1>
<p><strong>WeekModel</strong> class describes a model for a weekly schedule. This class supports Xml serialization and deserialization.</p>
<div class="code" style="width:495px;float:right"><img src="~/Content/img/weeklyScheduleSerialization.jpg" /></div>
<p>Project contains an <strong>XSD schema</strong> to validate an XML. Moreover, WeekModel alread has an implemented equility operations.</p>
<p>The structure of the model is pretty straightforward. Class <strong>WeekModel</strong> has an instance of <strong>DayOfTheWeek</strong> class for each day of the week: Monday, Tuesday, Wednesday etc.</p>
<p>Each <strong>DayOfTheWeek</strong> class contains:</p>
<ul>
    <li><strong>DayOfWeek</strong>-enum value to identify a name of a weekday;</li>
    <li><strong>WorkingTime</strong>-enum value to identify a working time during a weekday;</li>
    <li><strong>WorkHours</strong>-class which is populated only for working time “WorkHours”;</li>
    <li><strong>A list of breaks</strong> which can be empty or has an unlimited number of breaks. For working time “Closed” it is null.</li>
</ul>
<div class="demo" style="width:594px"><img src="~/Content/img/weeklyScheduleModel.jpg" alt="weeklyScheduleModel"/></div>

<h1 id="view">View</h1>
<p>Control consists of 3 display templates and 1 editor template.</p>
<p>Display templates:</p>
<ul>
    <li><strong>Schedule</strong> – the main template which is called by the client code. Displays the whole model and generates Html for the timePicker control;</li>
    <li><strong>WorkingTime</strong> – a template which is used internally to display working time for each day of the week;</li>
    <li><strong>Breaks</strong> – a template which is used internally to display a list of breaks and allows editing of this list.</li>   
</ul>
<div class="demo" style="float:right;width:542px"><img src="~/Content/img/weeklyScheduleTimePickerModel.jpg" alt="weeklyScheduleDemo"/></div>
<p>Editor template:</p>
<ul>
    <li><strong>Time</strong> – generates the input-control for time.</li>
</ul>
<p>All these templates are pretty simple and small.</p>
<p>For the client-side support there are two .js files and two .css files:</p>
<div style="display:table-row">
    <div style="display:table-cell">
        <ul>
            <li><strong>schedule.js</strong></li>
            <li><strong>timePicker.js</strong></li>
        </ul>
    </div>
    <div style="display:table-cell">
        <ul>
            <li><strong>schedule.css</strong></li>
            <li><strong>timePicker.css</strong></li>
        </ul>
    </div>
</div>

<h1 id="controller">Controller</h1>
<p>There is no controller for this control, but there is an extension to HtmlHelper class to minimize logic in views and to provide an ability for the test-coverage: <strong>WeeklyScheduleHtmlHelper</strong> class.</p>

<h1 id="howToUse">How to use</h1>
<p>Generate an HTML for the weekly schedule in any place of you view using a Display Template:</p>
<div class="code" style="width:733px"><img src="~/Content/img/weeklyScheduleUsage.jpg" /></div>

 @foreach (TabWidgetModel tabWidget in this.Model)
    { @Html.Partial("TabWidget", tabWidget) }